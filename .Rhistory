dir()
dir()
dir()
setwd("~/Desktop/MOOC/data science")
lapply
runif(2)
rowSums
rnorm(2*2*10)
rnorm(2 * 2 * 10)
rnorm(400)
rnorm(2 * 2 * 10)
array()
array(1)
array(1,2)
array(1:10)
array(1:20)
array(1:50)
array(rnorm(2 * 2 * 10), c(2, 2, 10))
array(rnorm(40), c(2, 2, 10))
class(array(rnorm(2 * 2 * 10), c(2, 2, 10)))
array(1:40, c(2, 2, 10))
array(1:20, c(4, 5))
class(array(1:20, c(4, 5)))
class(array(1:40, c(2, 2, 10)))
list(1,2)
class(array(1:40, c(2, 2, 11)))
array(1:40, c(2, 2, 11))
gl()
gl(3,10)
range(1:10)
class(range(1:10))
mean(1:10, na.rm=TRUE)
mean(c(1,2,3,NA,4), na.rm=TRUE)
list(1:5,5:!)
list(1:5,5:1)
x<-rnorm(10)
x
list(gl(2,5),gl(5,2))
split(x,list(gl(2,5),gl(5,2)))
data(iris)
?iris
iris
head(iris)
split(iris, iris&Species)
split(iris, iris$Species)
split(iris$Sepal.Length, iris$Species)
lapply(split(iris, iris$Species), function(y) colMeans(y$Sepal.Length)
)
lapply(split(iris, iris$Species), function(y) colMeans(y[,Sepal.Length]))
lapply(split(iris, iris$Species), function(y) colMeans(y[,'Sepal.Length']))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c('Sepal.Length']))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c('Sepal.Length')])
)
lapply(split(iris, iris$Species), function(y) colMeans(y))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c("Sepal.Length")]))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c("Sepal.Length")]))
rm(x)
lapply(split(iris, iris$Species), function(y) colMeans(y[,c("Sepal.Length")]))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c("Sepal.Length", "Petal.Lengt")]))
lapply(split(iris, iris$Species), function(y) colMeans(y[,c("Sepal.Length", "Petal.Length")]))
colMeans(iris)
head(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
split(mtcars,mtcars$cyl)
lapply(split(mtcars,mtcars$cyl), function(x) mean(x$mpg)
)
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(-2)
tapply(mtcars$mpg, mtcars$cyl, mean)[3]
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[3]-tapply(mtcars$mpg, mtcars$cyl, mean)[1])
log(-1)
test<-function(x){}
y<-x
test<-function(x){}
test<-function(x){
y<-x
y<-y*2
x<-x/2
}
test(2)
test()
str(test)
test1<-function(x){
return x}
test1<-function(x){
return(x)}
test1(2)
traceback()
mean(z)
traceback()
debug(test1)
debug(test)
test
test(5)
test(5)
?debug
abs(tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1])
tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
)
vec<-1:100
cachemean(vec)
cachemean(makeVector,vec)
cachemean(makeVector)
makeVector()
cachemean(makeVector)
cachemean(vec)
makeVector(1:100)
makeVector$set(1:100)
makeVector$set(100)
supervector <- makeVector(c(2, 4, 6, 8))
supervector
cachemean(supervector)
cachemean(supervector)
solve()
c=rbind(c(1, -1/4), c(-1/4, 1))
rm(c)
x<-rbind(c(1, -1/4), c(-1/4, 1))
x
solve(x)
solve(x)%*%x
supervector$get()
dir()
cd read.csv
setwd("./repository//ProgrammingAssignment2")
ls()
dir()
source("cachematrix.R")
supermatrix<-makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(supermatrix)
cacheSolve(supermatrix)
